#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DX Bot –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

BOT_NAME="dx-bot"
COMPOSE_FILE="docker-compose.yml"
PROJECT_DIR="/opt/dx-bot"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        log "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose
check_compose() {
    if ! command -v docker-compose &> /dev/null; then
        log "${RED}‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ .env —Ñ–∞–π–ª–∞
check_env() {
    if [ ! -f .env ]; then
        log "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        log "${YELLOW}üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–∑ env.example${NC}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if ! grep -q "BOT_TOKEN=" .env || grep -q "your_bot_token_here" .env; then
        log "${RED}‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ${NC}"
        exit 1
    fi
    
    if ! grep -q "CHAT_ID=" .env || grep -q "your_chat_id_here" .env; then
        log "${RED}‚ùå CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    if docker-compose ps | grep -q "Up"; then
        echo -e "${GREEN}‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    start)
        log "${BLUE}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DX Bot...${NC}"
        check_docker
        check_compose
        check_env
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        mkdir -p bot_data/screenshots bot_data/json_history logs
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        if check_status &> /dev/null; then
            log "${YELLOW}‚ö†Ô∏è  –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...${NC}"
            docker-compose down
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        docker-compose up -d --build
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        sleep 5
        if check_status; then
            log "${GREEN}‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω${NC}"
        else
            log "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞${NC}"
            docker-compose logs --tail=20
            exit 1
        fi
        ;;
        
    stop)
        log "${BLUE}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DX Bot...${NC}"
        check_docker
        check_compose
        
        if docker-compose down; then
            log "${GREEN}‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        else
            log "${RED}‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞${NC}"
            exit 1
        fi
        ;;
        
    restart)
        log "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º DX Bot...${NC}"
        $0 stop
        sleep 2
        $0 start
        ;;
        
    status)
        log "${BLUE}üìä –°—Ç–∞—Ç—É—Å DX Bot:${NC}"
        check_docker
        check_compose
        
        echo ""
        docker-compose ps
        echo ""
        
        if check_status &> /dev/null; then
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            echo -e "${BLUE}üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
            
            echo ""
            echo -e "${BLUE}üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
            df -h | grep -E "(Filesystem|/dev/)"
        fi
        ;;
        
    logs)
        log "${BLUE}üìã –õ–æ–≥–∏ DX Bot:${NC}"
        check_docker
        check_compose
        
        if [ "$2" = "follow" ] || [ "$2" = "-f" ]; then
            docker-compose logs -f --tail=100
        else
            docker-compose logs --tail=100
        fi
        ;;
        
    cleanup)
        log "${BLUE}üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã...${NC}"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ JSON —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
        if [ -d "bot_data/json_history" ]; then
            find bot_data/json_history -name "*.json" -mtime +1 -delete
            log "${GREEN}‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ JSON —Ñ–∞–π–ª—ã${NC}"
        fi
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
        if [ -d "bot_data/screenshots" ]; then
            find bot_data/screenshots -name "*.png" -mtime +1 -delete
            log "${GREEN}‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã${NC}"
        fi
        
        # –û—á–∏—â–∞–µ–º Docker
        log "${BLUE}üê≥ –û—á–∏—â–∞–µ–º Docker...${NC}"
        docker system prune -f
        
        log "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
        ;;
        
    test-cleanup)
        log "${BLUE}üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏...${NC}"
        if [ -f "test_cleanup.py" ]; then
            python3 test_cleanup.py
        else
            log "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª test_cleanup.py –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        fi
        ;;
        
    test-channel)
        log "${BLUE}üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª...${NC}"
        if [ -f "test_channel.py" ]; then
            python3 test_channel.py
        else
            log "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª test_channel.py –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        fi
        ;;
        
    update)
        log "${BLUE}üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞...${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Å—Ç–∞—Ç—É—Å
        if [ -d ".git" ]; then
            log "${BLUE}üì• –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
            git pull origin main
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            $0 stop
            
            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
            log "${BLUE}üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º...${NC}"
            docker-compose up -d --build
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            sleep 5
            if check_status; then
                log "${GREEN}‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω${NC}"
            else
                log "${RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è${NC}"
                exit 1
            fi
        else
            log "${RED}‚ùå –≠—Ç–æ –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π${NC}"
            exit 1
        fi
        ;;
        
    backup)
        log "${BLUE}üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...${NC}"
        
        BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).tar.gz"
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        tar -czf "$BACKUP_NAME" \
            --exclude='*.log' \
            --exclude='*.tmp' \
            --exclude='venv' \
            --exclude='.git' \
            bot_data/ \
            previous_tokens.json \
            .env \
            config.py \
            bot.py
        
        if [ -f "$BACKUP_NAME" ]; then
            log "${GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_NAME${NC}"
            ls -lh "$BACKUP_NAME"
        else
            log "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏${NC}"
            exit 1
        fi
        ;;
        
    health)
        log "${BLUE}üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞...${NC}"
        check_docker
        check_compose
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if check_status &> /dev/null; then
            echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
            ERROR_COUNT=$(docker-compose logs --tail=100 | grep -i "error\|exception\|traceback" | wc -l)
            if [ "$ERROR_COUNT" -gt 0 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö${NC}"
            else
                echo -e "${GREEN}‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            echo -e "${BLUE}üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:${NC}"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
        else
            echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
            exit 1
        fi
        ;;
        
    --help|-h|help)
        echo -e "${BLUE}ü§ñ DX Bot Manager${NC}"
        echo ""
        echo -e "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${GREEN}$0 {–∫–æ–º–∞–Ω–¥–∞}${NC}"
        echo ""
        echo -e "${YELLOW}–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
        echo -e "  ${GREEN}start${NC}     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo -e "  ${GREEN}stop${NC}      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
        echo -e "  ${GREEN}restart${NC}   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo -e "  ${GREEN}status${NC}    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
        echo -e "  ${GREEN}logs${NC}      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo -e "  ${GREEN}health${NC}    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
        echo ""
        echo -e "${YELLOW}–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:${NC}"
        echo -e "  ${GREEN}cleanup${NC}   - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã"
        echo -e "  ${GREEN}update${NC}    - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
        echo -e "  ${GREEN}backup${NC}    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        echo ""
        echo -e "${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}"
        echo -e "  ${GREEN}test-cleanup${NC}  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏"
        echo -e "  ${GREEN}test-channel${NC}  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª"
        echo ""
        echo -e "${YELLOW}Telegram –∫–æ–º–∞–Ω–¥—ã:${NC}"
        echo -e "  ${GREEN}/start${NC}    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
        echo -e "  ${GREEN}/status${NC}   - –°—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        echo -e "  ${GREEN}/health${NC}   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
        echo -e "  ${GREEN}/logs${NC}     - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
        echo -e "  ${GREEN}/restart${NC}  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
        echo -e "  ${GREEN}/cleanup${NC}  - –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"
        echo ""
        echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
        echo -e "  ${GREEN}$0 start${NC}      # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo -e "  ${GREEN}$0 logs -f${NC}    # –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        echo -e "  ${GREEN}$0 health${NC}     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
        ;;
        
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo ""
        echo -e "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${GREEN}$0 --help${NC} –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac
